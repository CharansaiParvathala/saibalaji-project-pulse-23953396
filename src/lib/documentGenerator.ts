
import { saveAs } from 'file-saver';
import { Project, ProgressEntry, PaymentRequest } from '@/types';

export interface GenerateDocxOptions {
  title: string;
  projects: Project[];
  progressEntries: ProgressEntry[];
  paymentRequests: PaymentRequest[];
  generatedBy: string;
  generatedDate: string;
}

export async function generateDocx(options: GenerateDocxOptions): Promise<Blob> {
  try {
    // Import docx library at runtime
    const docx = await import('docx');
    
    const { 
      Document, Paragraph, TextRun, HeadingLevel, Table,
      TableRow, TableCell, BorderStyle, WidthType, AlignmentType,
      TableOfContents, PageBreak
    } = docx;

    // Create basic document structure (simplified for demo)
    const doc = new Document({
      sections: [
        {
          properties: {},
          children: [
            new Paragraph({
              text: options.title,
              heading: HeadingLevel.TITLE,
              alignment: AlignmentType.CENTER,
            }),
            new Paragraph({
              text: `Generated by: ${options.generatedBy} on ${new Date(options.generatedDate).toLocaleDateString()}`,
              alignment: AlignmentType.CENTER,
            }),
            new Paragraph({
              text: `Projects: ${options.projects.length}`,
              heading: HeadingLevel.HEADING_1,
            }),
            new Paragraph({
              text: `Progress Entries: ${options.progressEntries.length}`,
              heading: HeadingLevel.HEADING_1,
            }),
            new Paragraph({
              text: `Payment Requests: ${options.paymentRequests.length}`,
              heading: HeadingLevel.HEADING_1,
            }),
          ],
        },
      ],
    });

    // Generate and return as blob
    return await docx.Packer.toBlob(doc);
  } catch (error) {
    console.error("Error generating document:", error);
    throw new Error("Failed to generate document");
  }
}

// Add these functions for backup/index.tsx
export async function generateDataReport(fileName: string): Promise<Blob> {
  try {
    // This is a simplified version that generates a basic report
    const docx = await import('docx');
    const { Document, Paragraph, HeadingLevel } = docx;
    
    const doc = new Document({
      sections: [
        {
          properties: {},
          children: [
            new Paragraph({
              text: `Data Report: ${fileName}`,
              heading: HeadingLevel.TITLE,
            }),
            new Paragraph({
              text: `Generated on: ${new Date().toLocaleDateString()}`,
            }),
            new Paragraph({
              text: "This is a placeholder report document. In a real implementation, this would contain actual project data.",
            }),
          ],
        },
      ],
    });
    
    return await docx.Packer.toBlob(doc);
  } catch (error) {
    console.error("Error generating report:", error);
    throw new Error("Failed to generate report");
  }
}

export function downloadReport(blob: Blob, fileName: string): void {
  saveAs(blob, `${fileName.replace(/\s+/g, '_')}.docx`);
}
