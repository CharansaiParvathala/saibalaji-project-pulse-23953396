
import { saveAs } from 'file-saver';
// Note: Requiring document in TypeScript requires the use of dynamic imports
// We'll create a wrapper function that handles the dynamic import

export interface GenerateDocxOptions {
  title: string;
  projects: any[];
  progressEntries: any[];
  paymentRequests: any[];
  generatedBy: string;
  generatedDate: string;
}

export async function generateDocx(options: GenerateDocxOptions): Promise<Blob> {
  try {
    // Dynamically import docx library
    const docx = await import('docx');
    
    const { 
      Document, Paragraph, TextRun, HeadingLevel, Table,
      TableRow, TableCell, BorderStyle, WidthType, AlignmentType,
      TabStopPosition, TabStopType, TableOfContents, PageBreak
    } = docx;

    // Format date
    const formattedDate = new Date(options.generatedDate).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    
    // Create document title and intro
    const documentTitle = new Paragraph({
      text: options.title,
      heading: HeadingLevel.TITLE,
      alignment: AlignmentType.CENTER,
      spacing: {
        after: 400
      }
    });
    
    const generatedInfo = new Paragraph({
      children: [
        new TextRun({
          text: `Generated by: ${options.generatedBy}`,
          bold: true,
          size: 24
        }),
        new TextRun({
          text: `   Date: ${formattedDate}`,
          bold: true,
          size: 24
        })
      ],
      alignment: AlignmentType.CENTER,
      spacing: {
        after: 400
      }
    });
    
    // Create table of contents
    const toc = new TableOfContents("Table of Contents", {
      hyperlink: true,
      headingStyleRange: {
        start: 1,
        end: 3,
      },
    });
    
    const tocHeading = new Paragraph({
      text: "TABLE OF CONTENTS",
      heading: HeadingLevel.HEADING_1,
      spacing: {
        before: 400,
        after: 200
      }
    });
    
    // Add page break before main content
    const pageBreak = new Paragraph({
      children: [new PageBreak()]
    });
    
    // PROJECTS SECTION
    const projectsHeading = new Paragraph({
      text: "1. PROJECTS",
      heading: HeadingLevel.HEADING_1,
      spacing: {
        before: 400,
        after: 200
      }
    });
    
    const projectsSummary = new Paragraph({
      text: `Total Projects: ${options.projects.length}`,
      spacing: {
        after: 200
      }
    });
    
    // Create projects table
    const projectsTableRows = [
      new TableRow({
        tableHeader: true,
        children: [
          new TableCell({
            width: {
              size: 15,
              type: WidthType.PERCENTAGE,
            },
            children: [new Paragraph({
              text: "Project Name",
              alignment: AlignmentType.CENTER,
              bold: true
            })],
            shading: {
              fill: "F2F2F2"
            }
          }),
          new TableCell({
            width: {
              size: 15,
              type: WidthType.PERCENTAGE,
            },
            children: [new Paragraph({
              text: "Status",
              alignment: AlignmentType.CENTER,
              bold: true
            })],
            shading: {
              fill: "F2F2F2"
            }
          }),
          new TableCell({
            width: {
              size: 20,
              type: WidthType.PERCENTAGE,
            },
            children: [new Paragraph({
              text: "Workers",
              alignment: AlignmentType.CENTER,
              bold: true
            })],
            shading: {
              fill: "F2F2F2"
            }
          }),
          new TableCell({
            width: {
              size: 25,
              type: WidthType.PERCENTAGE,
            },
            children: [new Paragraph({
              text: "Created By",
              alignment: AlignmentType.CENTER,
              bold: true
            })],
            shading: {
              fill: "F2F2F2"
            }
          }),
          new TableCell({
            width: {
              size: 25,
              type: WidthType.PERCENTAGE,
            },
            children: [new Paragraph({
              text: "Created At",
              alignment: AlignmentType.CENTER,
              bold: true
            })],
            shading: {
              fill: "F2F2F2"
            }
          })
        ]
      }),
    ];
    
    // Add project rows
    options.projects.forEach(project => {
      projectsTableRows.push(
        new TableRow({
          children: [
            new TableCell({
              children: [new Paragraph(project.name)]
            }),
            new TableCell({
              children: [new Paragraph({
                text: project.status,
                alignment: AlignmentType.CENTER
              })]
            }),
            new TableCell({
              children: [new Paragraph({
                text: project.num_workers.toString(),
                alignment: AlignmentType.CENTER
              })]
            }),
            new TableCell({
              children: [new Paragraph(project.created_by)]
            }),
            new TableCell({
              children: [new Paragraph(new Date(project.created_at).toLocaleDateString())]
            })
          ]
        })
      );
    });
    
    const projectsTable = new Table({
      rows: projectsTableRows,
      width: {
        size: 100,
        type: WidthType.PERCENTAGE,
      },
      borders: {
        top: {
          style: BorderStyle.SINGLE,
          size: 1,
          color: "000000",
        },
        bottom: {
          style: BorderStyle.SINGLE,
          size: 1,
          color: "000000",
        },
        left: {
          style: BorderStyle.SINGLE,
          size: 1,
          color: "000000",
        },
        right: {
          style: BorderStyle.SINGLE,
          size: 1,
          color: "000000",
        },
        insideHorizontal: {
          style: BorderStyle.SINGLE,
          size: 1,
          color: "000000",
        },
        insideVertical: {
          style: BorderStyle.SINGLE,
          size: 1,
          color: "000000",
        },
      },
    });
    
    // PROGRESS ENTRIES SECTION
    const progressHeading = new Paragraph({
      text: "2. PROGRESS ENTRIES",
      heading: HeadingLevel.HEADING_1,
      spacing: {
        before: 400,
        after: 200
      }
    });
    
    const progressSummary = new Paragraph({
      text: `Total Progress Entries: ${options.progressEntries.length}`,
      spacing: {
        after: 200
      }
    });
    
    // Create progress entries table
    const progressTableRows = [
      new TableRow({
        tableHeader: true,
        children: [
          new TableCell({
            width: {
              size: 20,
              type: WidthType.PERCENTAGE,
            },
            children: [new Paragraph({
              text: "Project",
              alignment: AlignmentType.CENTER,
              bold: true
            })],
            shading: {
              fill: "F2F2F2"
            }
          }),
          new TableCell({
            width: {
              size: 15,
              type: WidthType.PERCENTAGE,
            },
            children: [new Paragraph({
              text: "Date",
              alignment: AlignmentType.CENTER,
              bold: true
            })],
            shading: {
              fill: "F2F2F2"
            }
          }),
          new TableCell({
            width: {
              size: 15,
              type: WidthType.PERCENTAGE,
            },
            children: [new Paragraph({
              text: "Status",
              alignment: AlignmentType.CENTER,
              bold: true
            })],
            shading: {
              fill: "F2F2F2"
            }
          }),
          new TableCell({
            width: {
              size: 15,
              type: WidthType.PERCENTAGE,
            },
            children: [new Paragraph({
              text: "Distance",
              alignment: AlignmentType.CENTER,
              bold: true
            })],
            shading: {
              fill: "F2F2F2"
            }
          }),
          new TableCell({
            width: {
              size: 35,
              type: WidthType.PERCENTAGE,
            },
            children: [new Paragraph({
              text: "Notes",
              alignment: AlignmentType.CENTER,
              bold: true
            })],
            shading: {
              fill: "F2F2F2"
            }
          })
        ]
      }),
    ];
    
    // Add progress entry rows
    options.progressEntries.forEach(entry => {
      const projectName = options.projects.find(p => p.id === entry.project_id)?.name || entry.project_id;
      
      progressTableRows.push(
        new TableRow({
          children: [
            new TableCell({
              children: [new Paragraph(projectName)]
            }),
            new TableCell({
              children: [new Paragraph(new Date(entry.date).toLocaleDateString())]
            }),
            new TableCell({
              children: [new Paragraph({
                text: entry.status || "N/A",
                alignment: AlignmentType.CENTER
              })]
            }),
            new TableCell({
              children: [new Paragraph({
                text: entry.distance_completed ? `${entry.distance_completed} km` : "N/A",
                alignment: AlignmentType.CENTER
              })]
            }),
            new TableCell({
              children: [new Paragraph(entry.notes || "")]
            })
          ]
        })
      );
    });
    
    const progressTable = new Table({
      rows: progressTableRows,
      width: {
        size: 100,
        type: WidthType.PERCENTAGE,
      },
      borders: {
        top: {
          style: BorderStyle.SINGLE,
          size: 1,
          color: "000000",
        },
        bottom: {
          style: BorderStyle.SINGLE,
          size: 1,
          color: "000000",
        },
        left: {
          style: BorderStyle.SINGLE,
          size: 1,
          color: "000000",
        },
        right: {
          style: BorderStyle.SINGLE,
          size: 1,
          color: "000000",
        },
        insideHorizontal: {
          style: BorderStyle.SINGLE,
          size: 1,
          color: "000000",
        },
        insideVertical: {
          style: BorderStyle.SINGLE,
          size: 1,
          color: "000000",
        },
      },
    });
    
    // PAYMENT REQUESTS SECTION
    const paymentHeading = new Paragraph({
      text: "3. PAYMENT REQUESTS",
      heading: HeadingLevel.HEADING_1,
      spacing: {
        before: 400,
        after: 200
      }
    });
    
    const paymentSummary = new Paragraph({
      text: `Total Payment Requests: ${options.paymentRequests.length}`,
      spacing: {
        after: 200
      }
    });
    
    // Calculate total payment amount
    const totalAmount = options.paymentRequests.reduce((sum, req) => sum + (req.amount || 0), 0);
    const totalAmountText = new Paragraph({
      text: `Total Amount: ₹${totalAmount.toFixed(2)}`,
      spacing: {
        after: 200
      }
    });
    
    // Create payment requests table
    const paymentTableRows = [
      new TableRow({
        tableHeader: true,
        children: [
          new TableCell({
            width: {
              size: 20,
              type: WidthType.PERCENTAGE,
            },
            children: [new Paragraph({
              text: "Project",
              alignment: AlignmentType.CENTER,
              bold: true
            })],
            shading: {
              fill: "F2F2F2"
            }
          }),
          new TableCell({
            width: {
              size: 15,
              type: WidthType.PERCENTAGE,
            },
            children: [new Paragraph({
              text: "Amount (₹)",
              alignment: AlignmentType.CENTER,
              bold: true
            })],
            shading: {
              fill: "F2F2F2"
            }
          }),
          new TableCell({
            width: {
              size: 15,
              type: WidthType.PERCENTAGE,
            },
            children: [new Paragraph({
              text: "Status",
              alignment: AlignmentType.CENTER,
              bold: true
            })],
            shading: {
              fill: "F2F2F2"
            }
          }),
          new TableCell({
            width: {
              size: 15,
              type: WidthType.PERCENTAGE,
            },
            children: [new Paragraph({
              text: "Requested On",
              alignment: AlignmentType.CENTER,
              bold: true
            })],
            shading: {
              fill: "F2F2F2"
            }
          }),
          new TableCell({
            width: {
              size: 35,
              type: WidthType.PERCENTAGE,
            },
            children: [new Paragraph({
              text: "Description",
              alignment: AlignmentType.CENTER,
              bold: true
            })],
            shading: {
              fill: "F2F2F2"
            }
          })
        ]
      }),
    ];
    
    // Add payment request rows
    options.paymentRequests.forEach(payment => {
      const projectName = options.projects.find(p => p.id === payment.project_id)?.name || payment.project_id;
      
      paymentTableRows.push(
        new TableRow({
          children: [
            new TableCell({
              children: [new Paragraph(projectName)]
            }),
            new TableCell({
              children: [new Paragraph({
                text: payment.amount.toFixed(2),
                alignment: AlignmentType.RIGHT
              })]
            }),
            new TableCell({
              children: [new Paragraph({
                text: payment.status,
                alignment: AlignmentType.CENTER
              })]
            }),
            new TableCell({
              children: [new Paragraph(new Date(payment.requested_at).toLocaleDateString())]
            }),
            new TableCell({
              children: [new Paragraph(payment.description || "")]
            })
          ]
        })
      );
    });
    
    const paymentTable = new Table({
      rows: paymentTableRows,
      width: {
        size: 100,
        type: WidthType.PERCENTAGE,
      },
      borders: {
        top: {
          style: BorderStyle.SINGLE,
          size: 1,
          color: "000000",
        },
        bottom: {
          style: BorderStyle.SINGLE,
          size: 1,
          color: "000000",
        },
        left: {
          style: BorderStyle.SINGLE,
          size: 1,
          color: "000000",
        },
        right: {
          style: BorderStyle.SINGLE,
          size: 1,
          color: "000000",
        },
        insideHorizontal: {
          style: BorderStyle.SINGLE,
          size: 1,
          color: "000000",
        },
        insideVertical: {
          style: BorderStyle.SINGLE,
          size: 1,
          color: "000000",
        },
      },
    });
    
    // Create the document
    const doc = new Document({
      sections: [
        {
          properties: {},
          children: [
            documentTitle,
            generatedInfo,
            tocHeading,
            toc,
            pageBreak,
            projectsHeading,
            projectsSummary,
            projectsTable,
            progressHeading,
            progressSummary,
            progressTable,
            paymentHeading,
            paymentSummary,
            totalAmountText,
            paymentTable
          ],
        },
      ],
    });

    // Generate and return as blob
    return await docx.Packer.toBlob(doc);
  } catch (error) {
    console.error("Error generating document:", error);
    throw new Error("Failed to generate document");
  }
}
